name: Build, Push, and Deploy ML Model to AKS


on:
  push:
    branches:
      - PrometheusGrafana
  workflow_dispatch:

jobs:
  build-push-deploy:
    name: Build, Push, and Deploy ML Model to AKS
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Authenticate with Azure CLI using Device Code
      - name: Authenticate with Azure CLI
        run: az login --use-device-code

      # Step 3: Set Azure Subscription
      - name: Set Azure Subscription
        run: az account set --subscription "1fad5e2e-cd4b-437b-8fff-ee503b4e0e29"

      # Step 4: Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        run: az acr login --name acrterraformSepsisStreamingv1

      # Step 5: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t acrterraformsepsisstreamingv1.azurecr.io/your-image-name:latest .
          docker push acrterraformsepsisstreamingv1.azurecr.io/your-image-name:latest

      # Step 6: Configure kubectl for AKS
      - name: Configure kubectl for AKS
        run: |
          az aks get-credentials \
            --resource-group rg-aks-acr-terraformv1 \
            --name aks-terraform-clusterv1 \
            --overwrite-existing

      # Step 7: Apply Kubernetes Manifests
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      # Step 8: Redeploy with Updated Image
      - name: Redeploy ML Model with Updated Image
        run: |
          kubectl set image deployment/ml-model-deployment \
            ml-model=acrterraformsepsisstreamingv1.azurecr.io/your-image-name:latest

      # Step 9: Wait for Resources to Stabilize
      - name: Wait for Resources to Stabilize
        run: |
          echo "Waiting for pods and service to stabilize..."
          sleep 30

      # Step 10: Verify Deployment
      - name: Check Pods and External IP
        run: |
          kubectl get pods
          kubectl get service ml-model-service
