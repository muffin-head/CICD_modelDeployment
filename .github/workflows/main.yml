name: CI/CD for Model Deployment with AKS and ACR

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Authenticate with Azure CLI
      - name: Authenticate with Azure CLI
        run: az login --use-device-code

      # Step 3: Attach ACR to AKS
      - name: Attach ACR to AKS
        run: |
          az aks update \
            --resource-group rg-aks-acr-terraform \
            --name aks-terraform-cluster \
            --attach-acr acrterraformSepsisStreaming

      # Step 4: Fetch ACR Credentials
      - name: Fetch ACR Credentials
        id: fetch-acr-credentials
        run: |
          ACR_USERNAME=$(az acr credential show --name acrterraformSepsisStreaming --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name acrterraformSepsisStreaming --query passwords[0].value -o tsv)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          echo $ACR_PASSWORD | docker login acrterraformSepsisStreaming.azurecr.io --username $ACR_USERNAME --password-stdin
          docker build -t acrterraformsepsisstreaming.azurecr.io/randomforest:staging .
          docker push acrterraformsepsisstreaming.azurecr.io/randomforest:staging

      # Step 6: Configure kubectl for AKS
      - name: Configure kubectl
        run: |
          az aks get-credentials \
            --resource-group rg-aks-acr-terraform \
            --name aks-terraform-cluster \
            --overwrite-existing

      # Step 7: Deploy Application to AKS
      - name: Deploy Application
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
